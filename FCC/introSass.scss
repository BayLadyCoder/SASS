// Create and use variables
$text-color: red;
$main-fonts: Arial, sans-serif;

h2 {
  color: $text-color;
  font-family: $main-fonts;
}

// Nesting
.blog-post {
  h1 {
    text-align: center;
    color: blue;
  }
  p {
    font-size: 20px;
  }
}

// Mixin
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}

#awesome {
  width: 150px;
  height: 150px;
  background-color: green;
  @include border-radius(15px);
}

// @if / @else
@mixin border-stroke($val) {
  @if $val == light {
    border: 1px solid black;
  } @else if $val == medium {
    border: 3px solid black;
  } @else if $val == heavy {
    border: 6px solid black;
  } @else {
    border: none;
  }
}

#box {
  width: 150px;
  height: 150px;
  background-color: red;
  @include border-stroke(medium);
}

// @for Loop
@for $j from 1 to 6 {
  .text-#{$j} {
    font-size: 10px * $j;
  }
}

// @each to Map over items in a List
@each $color in blue, black, red {
  .#{$color}-bg {
    background-color: $color;
  }
}

div {
  height: 200px;
  width: 200px;
}

// another example
$colors: (
  color1: blue,
  color2: red,
  color3: green
);

@each $key, $color in $colors {
  .#{$color}-text {
    color: $color;
  }
}

/*
Note that the $key variable is needed to reference the keys in the map. Otherwise, the compiled CSS would have color1, color2... in it.

Output
.blue-text {
  color: blue;
}

.red-text {
  color: red;
}

.green-text {
  color: green;
}

*/




/*
Sass: Apply a Style Until a Condition is Met with @while

The @while directive is an option with similar functionality to the JavaScript while loop. It creates CSS rules until a condition is met.

The @for challenge gave an example to create a simple grid system. This can also work with @while.

$x: 1;
@while $x < 13 {
  .col-#{$x} { width: 100%/12 * $x;}
  $x: $x + 1;
}
First, define a variable $x and set it to 1. Next, use the @while directive to create the grid system while $x is less than 13.

After setting the CSS rule for width, $x is incremented by 1 to avoid an infinite loop.


Use @while to create a series of classes with different font-sizes.

There should be 10 different classes from text-1 to text-10. Then set font-size to 5px multiplied by the current index number. Make sure to avoid an infinite loop!
*/


<style type='text/sass'>
  $x: 1;

  @while $x < 11 {

  .text-#{$x} {font-size: 5*$x;}
  $x: $x+1;
  }
  
  
</style>

<p class="text-1">Hello</p>
<p class="text-2">Hello</p>
<p class="text-3">Hello</p>
<p class="text-4">Hello</p>
<p class="text-5">Hello</p>
<p class="text-6">Hello</p>
<p class="text-7">Hello</p>
<p class="text-8">Hello</p>
<p class="text-9">Hello</p>
<p class="text-10">Hello</p>